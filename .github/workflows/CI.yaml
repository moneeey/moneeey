name: CI/CD

on: push

jobs:
  INSTALL:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "16.17"

      - uses: actions/cache@v2
        with:
          path: |
            backend/node_modules
            frontend/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-moneeey-${{ hashFiles('backend/package.json') }}-${{ hashFiles('frontend/package.json') }}

      - run: yarn install --frozen-lockfile
        name: Install frontend
        working-directory: frontend

      - run: yarn install --frozen-lockfile
        name: Install backend
        working-directory: backend

  TEST:
    needs: INSTALL
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [backend, frontend]
    defaults:
      run:
        working-directory: ${{ matrix.service }}
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-node@v3
        with:
          node-version: "16.17"

      - uses: actions/cache@v2
        with:
          path: |
            backend/node_modules
            frontend/node_modules
            /home/runner/.cache/Cypress
          key: ${{ runner.os }}-moneeey-${{ hashFiles('backend/package.json') }}-${{ hashFiles('frontend/package.json') }}

      - run: yarn test
        name: Test

      - name: Cypress
        uses: cypress-io/github-action@v4
        if: matrix.service == 'frontend'
        env:
          CYPRESS_BASE_URL: "http://127.0.0.1:42069"
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          NODE_OPTIONS: "--max_old_space_size=4096"
        with:
          install: false
          record: true
          build: yarn build
          start: npx http-serve dist -p 42069 && sleep 2 && wait-on 'http://127.0.0.1:42069'
          working-directory: frontend
          browser: chrome

  PACKAGE:
    runs-on: ubuntu-latest
    needs: TEST
    if: startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        service: [backend, frontend]
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}-${{ matrix.service }}
    defaults:
      run:
        working-directory: ${{ matrix.service }}
    steps:
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@79abd3f86f79a9d68a23c75a09a9a85889262adf

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Log into Github Docker registry
        uses: docker/login-action@28218f9b04b4f3f62068d7b6ce6ca5b26e35336c
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@ac9327eae2b366085ac7f6a2d02df8aa8ead720a
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile.prod
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max

      - name: Write updated cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  DEPLOY:
    runs-on: [self-hosted]
    if: startsWith(github.ref, 'refs/tags/')
    needs: PACKAGE
    env:
      FRONTEND_IMAGE: ghcr.io/${{ github.repository }}-frontend:${{ github.ref_name }}
      BACKEND_IMAGE: ghcr.io/${{ github.repository }}-backend:${{ github.ref_name }}
    permissions:
      contents: read
      packages: read
    steps:
      # Download docker-compose.prod.yaml, updates image and deploy. TODO: Change to docker swarm
      - name: deploy
        run: |
          cd ~/moneeey && \
          curl https://raw.githubusercontent.com/${{ github.repository }}/${{ github.ref_name }}/docker/docker-compose.prod.yaml > docker-compose.yaml && \
          sed -i 's@FRONTEND_IMAGE@${{ env.FRONTEND_IMAGE }}@' docker-compose.yaml && \
          sed -i 's@BACKEND_IMAGE@${{ env.BACKEND_IMAGE }}@' docker-compose.yaml && \
          docker-compose up --remove-orphans -d
